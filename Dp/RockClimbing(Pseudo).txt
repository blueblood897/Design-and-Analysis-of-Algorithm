Function RockClimbWithPath(C[1..n][1..m]):

    Create 2D array A[1..n][1..m]      // DP table
    Create 2D array parent[1..n][1..m] // to track the path

    // Step 1: Base case — top row = same as danger values
    for j = 1 to m:
        A[1][j] = C[1][j]
        parent[1][j] = null  // top row has no parent

    // Step 2: Bottom-up fill with parent tracking
    for i = 2 to n:
        for j = 1 to m:
            minVal = A[i-1][j]
            from = (i-1, j)

            if j > 1 and A[i-1][j-1] < minVal:
                minVal = A[i-1][j-1]
                from = (i-1, j-1)

            if j < m and A[i-1][j+1] < minVal:
                minVal = A[i-1][j+1]
                from = (i-1, j+1)

            A[i][j] = C[i][j] + minVal
            parent[i][j] = from

    // Step 3: Find the column in the last row with minimum danger
    minDanger = ∞
    endColumn = -1
    for j = 1 to m:
        if A[n][j] < minDanger:
            minDanger = A[n][j]
            endColumn = j

    // Step 4: Backtrack using parent[] to find path
    path = empty list
    i = n
    j = endColumn
    while i != null and j != null:
        add (i, j) to front of path
        (i, j) = parent[i][j]

    return minDanger, path
